; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\main.crf ..\main.c]
                          THUMB

                          AREA ||i.SYS_Init||, CODE, READONLY, ALIGN=2

                  SYS_Init PROC
;;;240    
;;;241    void SYS_Init(void)
000000  b570              PUSH     {r4-r6,lr}
000002  2059              MOVS     r0,#0x59
000004  4c1a              LDR      r4,|L1.112|
000006  2216              MOVS     r2,#0x16
000008  2188              MOVS     r1,#0x88
                  |L1.10|
00000a  6020              STR      r0,[r4,#0]
00000c  6022              STR      r2,[r4,#0]
00000e  6021              STR      r1,[r4,#0]
000010  6823              LDR      r3,[r4,#0]
000012  2b00              CMP      r3,#0
000014  d0f9              BEQ      |L1.10|
;;;242    {
;;;243        /* Unlock protected registers */
;;;244        SYS_UnlockReg();
;;;245    
;;;246        /* Enable HIRC clock (Internal RC 48MHz) */
;;;247        CLK_EnableXtalRC(CLK_PWRCTL_HIRCEN_Msk);
000016  2004              MOVS     r0,#4
000018  f7fffffe          BL       CLK_EnableXtalRC
;;;248    //    CLK_EnableXtalRC(CLK_PWRCTL_HXTEN_Msk);
;;;249    	
;;;250        /* Wait for HIRC clock ready */
;;;251        CLK_WaitClockReady(CLK_STATUS_HIRCSTB_Msk);
00001c  2010              MOVS     r0,#0x10
00001e  f7fffffe          BL       CLK_WaitClockReady
;;;252    //    CLK_WaitClockReady(CLK_STATUS_HXTSTB_Msk);
;;;253    	
;;;254        /* Select HCLK clock source as HIRC and HCLK source divider as 1 */
;;;255        CLK_SetHCLK(CLK_CLKSEL0_HCLKSEL_HIRC, CLK_CLKDIV0_HCLK(1));
000022  2100              MOVS     r1,#0
000024  2007              MOVS     r0,#7
000026  f7fffffe          BL       CLK_SetHCLK
;;;256    
;;;257        /* Enable UART0 clock */
;;;258        CLK_EnableModuleClock(UART0_MODULE);
00002a  4d12              LDR      r5,|L1.116|
00002c  4628              MOV      r0,r5
00002e  f7fffffe          BL       CLK_EnableModuleClock
;;;259        CLK_SetModuleClock(UART0_MODULE, CLK_CLKSEL1_UART0SEL_PCLK0, CLK_CLKDIV0_UART0(1));
000032  2101              MOVS     r1,#1
000034  2200              MOVS     r2,#0
000036  0689              LSLS     r1,r1,#26
000038  4628              MOV      r0,r5
00003a  f7fffffe          BL       CLK_SetModuleClock
;;;260    	
;;;261        CLK_EnableModuleClock(TMR1_MODULE);
00003e  4d0e              LDR      r5,|L1.120|
000040  4628              MOV      r0,r5
000042  f7fffffe          BL       CLK_EnableModuleClock
;;;262        CLK_SetModuleClock(TMR1_MODULE, CLK_CLKSEL1_TMR1SEL_PCLK0, 0);
000046  2101              MOVS     r1,#1
000048  2200              MOVS     r2,#0
00004a  0349              LSLS     r1,r1,#13
00004c  4628              MOV      r0,r5
00004e  f7fffffe          BL       CLK_SetModuleClock
;;;263    //    CLK_SetModuleClock(TMR1_MODULE, CLK_CLKSEL1_TMR1SEL_HIRC, 0);
;;;264    	
;;;265        /* Update System Core Clock */
;;;266        SystemCoreClockUpdate();
000052  f7fffffe          BL       SystemCoreClockUpdate
;;;267    
;;;268        /* Set PB multi-function pins for UART0 RXD=PB.12 and TXD=PB.13 */
;;;269        SYS->GPB_MFPH = (SYS->GPB_MFPH & ~(SYS_GPB_MFPH_PB12MFP_Msk | SYS_GPB_MFPH_PB13MFP_Msk))    |       \
000056  2001              MOVS     r0,#1
000058  0780              LSLS     r0,r0,#30
00005a  6bc1              LDR      r1,[r0,#0x3c]
00005c  22ff              MOVS     r2,#0xff
00005e  0412              LSLS     r2,r2,#16
000060  4391              BICS     r1,r1,r2
000062  2233              MOVS     r2,#0x33
000064  0452              LSLS     r2,r2,#17
000066  1889              ADDS     r1,r1,r2
000068  63c1              STR      r1,[r0,#0x3c]
00006a  2000              MOVS     r0,#0
00006c  6020              STR      r0,[r4,#0]
;;;270                        (SYS_GPB_MFPH_PB12MFP_UART0_RXD | SYS_GPB_MFPH_PB13MFP_UART0_TXD);
;;;271    
;;;272        /* Lock protected registers */
;;;273        SYS_LockReg();
;;;274    }
00006e  bd70              POP      {r4-r6,pc}
;;;275    
                          ENDP

                  |L1.112|
                          DCD      0x40000100
                  |L1.116|
                          DCD      0x5f803d10
                  |L1.120|
                          DCD      0x5ec00003

                          AREA ||i.TIMER1_Init||, CODE, READONLY, ALIGN=2

                  TIMER1_Init PROC
;;;232    
;;;233    void TIMER1_Init(void)
000000  b510              PUSH     {r4,lr}
;;;234    {
;;;235        TIMER_Open(TIMER1, TIMER_PERIODIC_MODE, 1000);
000002  4c0a              LDR      r4,|L2.44|
000004  227d              MOVS     r2,#0x7d
000006  2101              MOVS     r1,#1
000008  00d2              LSLS     r2,r2,#3
00000a  06c9              LSLS     r1,r1,#27
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       TIMER_Open
000012  6820              LDR      r0,[r4,#0]
000014  0621              LSLS     r1,r4,#24
000016  4308              ORRS     r0,r0,r1
000018  6020              STR      r0,[r4,#0]
00001a  1508              ASRS     r0,r1,#20
00001c  4904              LDR      r1,|L2.48|
00001e  6008              STR      r0,[r1,#0]
000020  6820              LDR      r0,[r4,#0]
000022  0589              LSLS     r1,r1,#22
000024  4308              ORRS     r0,r0,r1
000026  6020              STR      r0,[r4,#0]
;;;236        TIMER_EnableInt(TIMER1);
;;;237        NVIC_EnableIRQ(TMR1_IRQn);	
;;;238        TIMER_Start(TIMER1);
;;;239    }
000028  bd10              POP      {r4,pc}
;;;240    
                          ENDP

00002a  0000              DCW      0x0000
                  |L2.44|
                          DCD      0x40050020
                  |L2.48|
                          DCD      0xe000e100

                          AREA ||i.TMR1_IRQHandler||, CODE, READONLY, ALIGN=2

                  TMR1_IRQHandler PROC
;;;222    
;;;223    void TMR1_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
000002  4805              LDR      r0,|L3.24|
000004  6881              LDR      r1,[r0,#8]
000006  07c9              LSLS     r1,r1,#31
000008  0fc9              LSRS     r1,r1,#31
;;;224    {	
00000a  d003              BEQ      |L3.20|
00000c  2101              MOVS     r1,#1
00000e  6081              STR      r1,[r0,#8]
;;;225        if(TIMER_GetIntFlag(TIMER1) == 1)
;;;226        {
;;;227            TIMER_ClearIntFlag(TIMER1);
;;;228    
;;;229    		timer_counter();	
000010  f7fffffe          BL       timer_counter
                  |L3.20|
;;;230        }
;;;231    }
000014  bd10              POP      {r4,pc}
;;;232    
                          ENDP

000016  0000              DCW      0x0000
                  |L3.24|
                          DCD      0x40050020

                          AREA ||i.UART02_IRQHandler||, CODE, READONLY, ALIGN=2

                  UART02_IRQHandler PROC
;;;181    
;;;182    void UART02_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;183    {
;;;184        if(UART_GET_INT_FLAG(UART0, UART_INTSTS_RDAINT_Msk | UART_INTSTS_RXTOINT_Msk))     /* UART receive data available flag */
000002  4c0b              LDR      r4,|L4.48|
000004  69e0              LDR      r0,[r4,#0x1c]
000006  2111              MOVS     r1,#0x11
000008  0209              LSLS     r1,r1,#8
00000a  4208              TST      r0,r1
00000c  d102              BNE      |L4.20|
00000e  e004              B        |L4.26|
                  |L4.16|
;;;185        {
;;;186            while(UART_GET_RX_EMPTY(UART0) == 0)
;;;187            {
;;;188                UARTx_Process();
000010  f7fffffe          BL       UARTx_Process
                  |L4.20|
000014  69a1              LDR      r1,[r4,#0x18]         ;186
000016  0449              LSLS     r1,r1,#17             ;186
000018  d5fa              BPL      |L4.16|
                  |L4.26|
;;;189            }
;;;190        }
;;;191    
;;;192        if(UART0->FIFOSTS & (UART_FIFOSTS_BIF_Msk | UART_FIFOSTS_FEF_Msk | UART_FIFOSTS_PEF_Msk | UART_FIFOSTS_RXOVIF_Msk))
00001a  69a1              LDR      r1,[r4,#0x18]
00001c  4620              MOV      r0,r4
00001e  2271              MOVS     r2,#0x71
000020  4211              TST      r1,r2
000022  d003              BEQ      |L4.44|
;;;193        {
;;;194            UART_ClearIntFlag(UART0, (UART_INTSTS_RLSINT_Msk| UART_INTSTS_BUFERRINT_Msk));
000024  2109              MOVS     r1,#9
000026  0289              LSLS     r1,r1,#10
000028  f7fffffe          BL       UART_ClearIntFlag
                  |L4.44|
;;;195        }
;;;196    }
00002c  bd10              POP      {r4,pc}
;;;197    
                          ENDP

00002e  0000              DCW      0x0000
                  |L4.48|
                          DCD      0x40070000

                          AREA ||i.UART0_Init||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  UART0_Init PROC
;;;197    
;;;198    void UART0_Init(void)
000000  b510              PUSH     {r4,lr}
;;;199    {
;;;200        SYS_ResetModule(UART0_RST);
000002  481e              LDR      r0,|L5.124|
000004  f7fffffe          BL       SYS_ResetModule
;;;201    
;;;202        /* Configure UART0 and set UART0 baud rate */
;;;203        UART_Open(UART0, 115200);
000008  4c1d              LDR      r4,|L5.128|
00000a  21e1              MOVS     r1,#0xe1
00000c  0249              LSLS     r1,r1,#9
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       UART_Open
;;;204    
;;;205    	/* Set UART receive time-out */
;;;206    	UART_SetTimeoutCnt(UART0, 20);
000014  2114              MOVS     r1,#0x14
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       UART_SetTimeoutCnt
;;;207    
;;;208    	UART0->FIFO &= ~UART_FIFO_RFITL_4BYTES;
00001c  68a0              LDR      r0,[r4,#8]
00001e  2110              MOVS     r1,#0x10
000020  4388              BICS     r0,r0,r1
000022  60a0              STR      r0,[r4,#8]
;;;209    	UART0->FIFO |= UART_FIFO_RFITL_8BYTES;
000024  68a0              LDR      r0,[r4,#8]
000026  2120              MOVS     r1,#0x20
000028  4308              ORRS     r0,r0,r1
00002a  60a0              STR      r0,[r4,#8]
;;;210    
;;;211    	/* Enable UART Interrupt - */
;;;212    	UART_ENABLE_INT(UART0, UART_INTEN_RDAIEN_Msk | UART_INTEN_TOCNTEN_Msk | UART_INTEN_RXTOIEN_Msk);
00002c  6860              LDR      r0,[r4,#4]
00002e  4915              LDR      r1,|L5.132|
000030  4308              ORRS     r0,r0,r1
000032  6060              STR      r0,[r4,#4]
000034  2001              MOVS     r0,#1
000036  4914              LDR      r1,|L5.136|
000038  0300              LSLS     r0,r0,#12
00003a  6008              STR      r0,[r1,#0]
;;;213    	
;;;214    	NVIC_EnableIRQ(UART02_IRQn);
;;;215    
;;;216    	printf("\r\nCLK_GetCPUFreq : %8d\r\n",CLK_GetCPUFreq());
00003c  f7fffffe          BL       CLK_GetCPUFreq
000040  4601              MOV      r1,r0
000042  a012              ADR      r0,|L5.140|
000044  f7fffffe          BL       __2printf
;;;217    	printf("CLK_GetHXTFreq : %8d\r\n",CLK_GetHXTFreq());
000048  f7fffffe          BL       CLK_GetHXTFreq
00004c  4601              MOV      r1,r0
00004e  a016              ADR      r0,|L5.168|
000050  f7fffffe          BL       __2printf
;;;218    	printf("CLK_GetLXTFreq : %8d\r\n",CLK_GetLXTFreq());	
000054  f7fffffe          BL       CLK_GetLXTFreq
000058  4601              MOV      r1,r0
00005a  a019              ADR      r0,|L5.192|
00005c  f7fffffe          BL       __2printf
;;;219    	printf("CLK_GetPCLK0Freq : %8d\r\n",CLK_GetPCLK0Freq());
000060  f7fffffe          BL       CLK_GetPCLK0Freq
000064  4601              MOV      r1,r0
000066  a01c              ADR      r0,|L5.216|
000068  f7fffffe          BL       __2printf
;;;220    	printf("CLK_GetPCLK1Freq : %8d\r\n",CLK_GetPCLK1Freq());	
00006c  f7fffffe          BL       CLK_GetPCLK1Freq
000070  4601              MOV      r1,r0
000072  a020              ADR      r0,|L5.244|
000074  f7fffffe          BL       __2printf
;;;221    }
000078  bd10              POP      {r4,pc}
;;;222    
                          ENDP

00007a  0000              DCW      0x0000
                  |L5.124|
                          DCD      0x04000010
                  |L5.128|
                          DCD      0x40070000
                  |L5.132|
                          DCD      0x00000811
                  |L5.136|
                          DCD      0xe000e100
                  |L5.140|
00008c  0d0a434c          DCB      "\r\nCLK_GetCPUFreq : %8d\r\n",0
000090  4b5f4765
000094  74435055
000098  46726571
00009c  203a2025
0000a0  38640d0a
0000a4  00      
0000a5  00                DCB      0
0000a6  00                DCB      0
0000a7  00                DCB      0
                  |L5.168|
0000a8  434c4b5f          DCB      "CLK_GetHXTFreq : %8d\r\n",0
0000ac  47657448
0000b0  58544672
0000b4  6571203a
0000b8  20253864
0000bc  0d0a00  
0000bf  00                DCB      0
                  |L5.192|
0000c0  434c4b5f          DCB      "CLK_GetLXTFreq : %8d\r\n",0
0000c4  4765744c
0000c8  58544672
0000cc  6571203a
0000d0  20253864
0000d4  0d0a00  
0000d7  00                DCB      0
                  |L5.216|
0000d8  434c4b5f          DCB      "CLK_GetPCLK0Freq : %8d\r\n",0
0000dc  47657450
0000e0  434c4b30
0000e4  46726571
0000e8  203a2025
0000ec  38640d0a
0000f0  00      
0000f1  00                DCB      0
0000f2  00                DCB      0
0000f3  00                DCB      0
                  |L5.244|
0000f4  434c4b5f          DCB      "CLK_GetPCLK1Freq : %8d\r\n",0
0000f8  47657450
0000fc  434c4b31
000100  46726571
000104  203a2025
000108  38640d0a
00010c  00      
00010d  00                DCB      0
00010e  00                DCB      0
00010f  00                DCB      0

                          AREA ||i.UARTx_Process||, CODE, READONLY, ALIGN=2

                  UARTx_Process PROC
;;;155    
;;;156    void UARTx_Process(void)
000000  b510              PUSH     {r4,lr}
;;;157    {
;;;158    	uint8_t res = 0;
;;;159    	
;;;160    	res = UART_READ(UART0);
000002  480b              LDR      r0,|L6.48|
000004  6800              LDR      r0,[r0,#0]
000006  b2c0              UXTB     r0,r0
;;;161    
;;;162    	if (res == 'x' || res == 'X')
000008  2878              CMP      r0,#0x78
00000a  d007              BEQ      |L6.28|
00000c  2858              CMP      r0,#0x58
00000e  d005              BEQ      |L6.28|
;;;163    	{
;;;164    		NVIC_SystemReset();
;;;165    	}
;;;166    
;;;167    	if (res > 0x7F)
000010  287f              CMP      r0,#0x7f
000012  d902              BLS      |L6.26|
;;;168    	{
;;;169    		printf("invalid command\r\n");
000014  a007              ADR      r0,|L6.52|
000016  f7fffffe          BL       __2printf
                  |L6.26|
;;;170    	}
;;;171    	else
;;;172    	{
;;;173    		switch(res)
;;;174    		{
;;;175    			case '1':
;;;176    
;;;177    				break;				
;;;178    		}
;;;179    	}
;;;180    }
00001a  bd10              POP      {r4,pc}
                  |L6.28|
00001c  f3bf8f4f          DSB      
000020  490a              LDR      r1,|L6.76|
000022  4809              LDR      r0,|L6.72|
000024  60c8              STR      r0,[r1,#0xc]
000026  f3bf8f4f          DSB      
                  |L6.42|
00002a  bf00              NOP      
00002c  e7fd              B        |L6.42|
;;;181    
                          ENDP

00002e  0000              DCW      0x0000
                  |L6.48|
                          DCD      0x40070000
                  |L6.52|
000034  696e7661          DCB      "invalid command\r\n",0
000038  6c696420
00003c  636f6d6d
000040  616e640d
000044  0a00    
000046  00                DCB      0
000047  00                DCB      0
                  |L6.72|
                          DCD      0x05fa0004
                  |L6.76|
                          DCD      0xe000ed00

                          AREA ||i.loop_100ms||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  loop_100ms PROC
;;;44     
;;;45     void loop_100ms(void)
000000  b510              PUSH     {r4,lr}
;;;46     {
;;;47     	static uint16_t CNT = 1;
;;;48     	static uint16_t LOG = 0;
;;;49     
;;;50     	if (is_flag_set(flag_100ms))
000002  490b              LDR      r1,|L7.48|
000004  7808              LDRB     r0,[r1,#0]  ; BitFlag
000006  06c2              LSLS     r2,r0,#27
000008  d510              BPL      |L7.44|
;;;51     	{		
;;;52     		set_flag(flag_100ms,DISABLE);	
00000a  22ef              MOVS     r2,#0xef
00000c  4010              ANDS     r0,r0,r2
00000e  7008              STRB     r0,[r1,#0]
;;;53     
;;;54     		if (CNT++ == (TIMER_1S/TIMER_100MS))
000010  8888              LDRH     r0,[r1,#4]  ; CNT
000012  1c42              ADDS     r2,r0,#1
000014  808a              STRH     r2,[r1,#4]
000016  280a              CMP      r0,#0xa
000018  d108              BNE      |L7.44|
;;;55     		{
;;;56     			CNT = 1;
00001a  2001              MOVS     r0,#1
00001c  8088              STRH     r0,[r1,#4]
;;;57     			printf("%s : %4d\r\n",__FUNCTION__,LOG++);
00001e  88ca              LDRH     r2,[r1,#6]  ; LOG
000020  1c50              ADDS     r0,r2,#1
000022  80c8              STRH     r0,[r1,#6]
000024  4903              LDR      r1,|L7.52|
000026  a004              ADR      r0,|L7.56|
000028  f7fffffe          BL       __2printf
                  |L7.44|
;;;58     		}			
;;;59     	}
;;;60     }
00002c  bd10              POP      {r4,pc}
;;;61     
                          ENDP

00002e  0000              DCW      0x0000
                  |L7.48|
                          DCD      ||.data||
                  |L7.52|
                          DCD      ||.constdata||
                  |L7.56|
000038  2573203a          DCB      "%s : %4d\r\n",0
00003c  20253464
000040  0d0a00  
000043  00                DCB      0

                          AREA ||i.loop_10ms||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  loop_10ms PROC
;;;80     
;;;81     void loop_10ms(void)
000000  b510              PUSH     {r4,lr}
;;;82     {
;;;83     	static uint16_t CNT = 1;
;;;84     	static uint16_t LOG = 0;
;;;85     
;;;86     	if (is_flag_set(flag_10ms))
000002  490b              LDR      r1,|L8.48|
000004  7808              LDRB     r0,[r1,#0]  ; BitFlag
000006  0742              LSLS     r2,r0,#29
000008  d510              BPL      |L8.44|
;;;87     	{		
;;;88     		set_flag(flag_10ms,DISABLE);	
00000a  22fb              MOVS     r2,#0xfb
00000c  4010              ANDS     r0,r0,r2
00000e  7008              STRB     r0,[r1,#0]
;;;89     
;;;90     		if (CNT++ == (TIMER_1S/TIMER_10MS))
000010  8988              LDRH     r0,[r1,#0xc]  ; CNT
000012  1c42              ADDS     r2,r0,#1
000014  818a              STRH     r2,[r1,#0xc]
000016  2864              CMP      r0,#0x64
000018  d108              BNE      |L8.44|
;;;91     		{
;;;92     			CNT = 1;
00001a  2001              MOVS     r0,#1
00001c  8188              STRH     r0,[r1,#0xc]
;;;93     			printf("%s : %4d\r\n",__FUNCTION__,LOG++);
00001e  89ca              LDRH     r2,[r1,#0xe]  ; LOG
000020  1c50              ADDS     r0,r2,#1
000022  81c8              STRH     r0,[r1,#0xe]
000024  4903              LDR      r1,|L8.52|
000026  a004              ADR      r0,|L8.56|
000028  f7fffffe          BL       __2printf
                  |L8.44|
;;;94     		}		
;;;95     	}
;;;96     }
00002c  bd10              POP      {r4,pc}
;;;97     
                          ENDP

00002e  0000              DCW      0x0000
                  |L8.48|
                          DCD      ||.data||
                  |L8.52|
                          DCD      ||.constdata||+0x15
                  |L8.56|
000038  2573203a          DCB      "%s : %4d\r\n",0
00003c  20253464
000040  0d0a00  
000043  00                DCB      0

                          AREA ||i.loop_1ms||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  loop_1ms PROC
;;;114    
;;;115    void loop_1ms(void)
000000  b510              PUSH     {r4,lr}
;;;116    {
;;;117    	static uint16_t CNT = 1;
;;;118    	static uint16_t LOG = 0;
;;;119    
;;;120    	if (is_flag_set(flag_1ms))
000002  490c              LDR      r1,|L9.52|
000004  7808              LDRB     r0,[r1,#0]  ; BitFlag
000006  07c2              LSLS     r2,r0,#31
000008  d012              BEQ      |L9.48|
;;;121    	{		
;;;122    		set_flag(flag_1ms,DISABLE);
00000a  0840              LSRS     r0,r0,#1
00000c  0040              LSLS     r0,r0,#1
00000e  7008              STRB     r0,[r1,#0]
;;;123    		
;;;124    		if (CNT++ == (TIMER_1S/TIMER_1MS))
000010  8a88              LDRH     r0,[r1,#0x14]  ; CNT
000012  1c42              ADDS     r2,r0,#1
000014  828a              STRH     r2,[r1,#0x14]
000016  227d              MOVS     r2,#0x7d
000018  00d2              LSLS     r2,r2,#3
00001a  4290              CMP      r0,r2
00001c  d108              BNE      |L9.48|
;;;125    		{
;;;126    			CNT = 1;
00001e  2001              MOVS     r0,#1
000020  8288              STRH     r0,[r1,#0x14]
;;;127    			printf("%s : %4d\r\n",__FUNCTION__,LOG++);
000022  8aca              LDRH     r2,[r1,#0x16]  ; LOG
000024  1c50              ADDS     r0,r2,#1
000026  82c8              STRH     r0,[r1,#0x16]
000028  4903              LDR      r1,|L9.56|
00002a  a004              ADR      r0,|L9.60|
00002c  f7fffffe          BL       __2printf
                  |L9.48|
;;;128    
;;;129    //			PB14 ^= 1;
;;;130    		}		
;;;131    	}
;;;132    }
000030  bd10              POP      {r4,pc}
;;;133    
                          ENDP

000032  0000              DCW      0x0000
                  |L9.52|
                          DCD      ||.data||
                  |L9.56|
                          DCD      ||.constdata||+0x28
                  |L9.60|
00003c  2573203a          DCB      "%s : %4d\r\n",0
000040  20253464
000044  0d0a00  
000047  00                DCB      0

                          AREA ||i.loop_50ms||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  loop_50ms PROC
;;;61     
;;;62     void loop_50ms(void)
000000  b510              PUSH     {r4,lr}
;;;63     {
;;;64     	static uint16_t CNT = 1;
;;;65     	static uint16_t LOG = 0;
;;;66     	
;;;67     	if (is_flag_set(flag_50ms))
000002  490b              LDR      r1,|L10.48|
000004  7808              LDRB     r0,[r1,#0]  ; BitFlag
000006  0702              LSLS     r2,r0,#28
000008  d510              BPL      |L10.44|
;;;68     	{		
;;;69     		set_flag(flag_50ms,DISABLE);	
00000a  22f7              MOVS     r2,#0xf7
00000c  4010              ANDS     r0,r0,r2
00000e  7008              STRB     r0,[r1,#0]
;;;70     
;;;71     		if (CNT++ == (TIMER_1S/TIMER_50MS))
000010  8908              LDRH     r0,[r1,#8]  ; CNT
000012  1c42              ADDS     r2,r0,#1
000014  810a              STRH     r2,[r1,#8]
000016  2814              CMP      r0,#0x14
000018  d108              BNE      |L10.44|
;;;72     		{
;;;73     			CNT = 1;
00001a  2001              MOVS     r0,#1
00001c  8108              STRH     r0,[r1,#8]
;;;74     			printf("%s : %4d\r\n",__FUNCTION__,LOG++);
00001e  894a              LDRH     r2,[r1,#0xa]  ; LOG
000020  1c50              ADDS     r0,r2,#1
000022  8148              STRH     r0,[r1,#0xa]
000024  4903              LDR      r1,|L10.52|
000026  a004              ADR      r0,|L10.56|
000028  f7fffffe          BL       __2printf
                  |L10.44|
;;;75     		}			
;;;76     	}
;;;77     }
00002c  bd10              POP      {r4,pc}
;;;78     
                          ENDP

00002e  0000              DCW      0x0000
                  |L10.48|
                          DCD      ||.data||
                  |L10.52|
                          DCD      ||.constdata||+0xb
                  |L10.56|
000038  2573203a          DCB      "%s : %4d\r\n",0
00003c  20253464
000040  0d0a00  
000043  00                DCB      0

                          AREA ||i.loop_5ms||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  loop_5ms PROC
;;;97     
;;;98     void loop_5ms(void)
000000  b510              PUSH     {r4,lr}
;;;99     {
;;;100    	static uint16_t CNT = 1;
;;;101    	static uint16_t LOG = 0;
;;;102    
;;;103    	if (is_flag_set(flag_5ms))
000002  490b              LDR      r1,|L11.48|
000004  7808              LDRB     r0,[r1,#0]  ; BitFlag
000006  0782              LSLS     r2,r0,#30
000008  d510              BPL      |L11.44|
;;;104    	{		
;;;105    		set_flag(flag_5ms,DISABLE);	
00000a  22fd              MOVS     r2,#0xfd
00000c  4010              ANDS     r0,r0,r2
00000e  7008              STRB     r0,[r1,#0]
;;;106    
;;;107    		if (CNT++ == (TIMER_1S/TIMER_5MS))
000010  8a08              LDRH     r0,[r1,#0x10]  ; CNT
000012  1c42              ADDS     r2,r0,#1
000014  820a              STRH     r2,[r1,#0x10]
000016  28c8              CMP      r0,#0xc8
000018  d108              BNE      |L11.44|
;;;108    		{
;;;109    			CNT = 1;
00001a  2001              MOVS     r0,#1
00001c  8208              STRH     r0,[r1,#0x10]
;;;110    			printf("%s : %4d\r\n",__FUNCTION__,LOG++);
00001e  8a4a              LDRH     r2,[r1,#0x12]  ; LOG
000020  1c50              ADDS     r0,r2,#1
000022  8248              STRH     r0,[r1,#0x12]
000024  4903              LDR      r1,|L11.52|
000026  a004              ADR      r0,|L11.56|
000028  f7fffffe          BL       __2printf
                  |L11.44|
;;;111    		}		
;;;112    	}
;;;113    }
00002c  bd10              POP      {r4,pc}
;;;114    
                          ENDP

00002e  0000              DCW      0x0000
                  |L11.48|
                          DCD      ||.data||
                  |L11.52|
                          DCD      ||.constdata||+0x1f
                  |L11.56|
000038  2573203a          DCB      "%s : %4d\r\n",0
00003c  20253464
000040  0d0a00  
000043  00                DCB      0

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;283    
;;;284    int main()
000000  f7fffffe          BL       SYS_Init
;;;285    {
;;;286        SYS_Init();
;;;287    
;;;288        UART0_Init();
000004  f7fffffe          BL       UART0_Init
;;;289    	
;;;290    	TIMER1_Init();
000008  f7fffffe          BL       TIMER1_Init
;;;291    	
;;;292        GPIO_SetMode(PB, BIT14, GPIO_MODE_OUTPUT);
00000c  2201              MOVS     r2,#1
00000e  0391              LSLS     r1,r2,#14
000010  4806              LDR      r0,|L12.44|
000012  f7fffffe          BL       GPIO_SetMode
                  |L12.22|
;;;293    	
;;;294        /* Got no where to go, just loop forever */
;;;295        while(1)
;;;296        {
;;;297    		loop_1ms();	
000016  f7fffffe          BL       loop_1ms
;;;298    		loop_5ms();
00001a  f7fffffe          BL       loop_5ms
;;;299    		loop_10ms();
00001e  f7fffffe          BL       loop_10ms
;;;300    		loop_50ms();
000022  f7fffffe          BL       loop_50ms
;;;301    		loop_100ms();
000026  f7fffffe          BL       loop_100ms
00002a  e7f4              B        |L12.22|
;;;302    	
;;;303        }
;;;304    }
;;;305    
                          ENDP

                  |L12.44|
                          DCD      0x40004040

                          AREA ||i.timer_counter||, CODE, READONLY, ALIGN=2

                  timer_counter PROC
;;;133    
;;;134    void timer_counter(void)
000000  b570              PUSH     {r4-r6,lr}
;;;135    {
;;;136    	conter_1ms ++;
000002  4d1b              LDR      r5,|L13.112|
;;;137    	
;;;138    	set_flag(flag_1ms,ENABLE);
000004  2101              MOVS     r1,#1
000006  8868              LDRH     r0,[r5,#2]            ;136  ; conter_1ms
000008  1c40              ADDS     r0,r0,#1              ;136
00000a  b280              UXTH     r0,r0                 ;136
00000c  8068              STRH     r0,[r5,#2]            ;136
00000e  782c              LDRB     r4,[r5,#0]  ; BitFlag
000010  4606              MOV      r6,r0                 ;136
000012  430c              ORRS     r4,r4,r1
000014  702c              STRB     r4,[r5,#0]
;;;139    	
;;;140    	if(!(conter_1ms %TIMER_5MS)){
000016  2105              MOVS     r1,#5
000018  f7fffffe          BL       __aeabi_uidivmod
00001c  2900              CMP      r1,#0
00001e  d102              BNE      |L13.38|
;;;141    		set_flag(flag_5ms,ENABLE);}
000020  2002              MOVS     r0,#2
000022  4304              ORRS     r4,r4,r0
000024  702c              STRB     r4,[r5,#0]
                  |L13.38|
;;;142    	
;;;143    	if(!(conter_1ms %TIMER_10MS)){
000026  210a              MOVS     r1,#0xa
000028  4630              MOV      r0,r6
00002a  f7fffffe          BL       __aeabi_uidivmod
00002e  2900              CMP      r1,#0
000030  d103              BNE      |L13.58|
;;;144    		set_flag(flag_10ms,ENABLE);}
000032  7828              LDRB     r0,[r5,#0]  ; BitFlag
000034  2104              MOVS     r1,#4
000036  4308              ORRS     r0,r0,r1
000038  7028              STRB     r0,[r5,#0]
                  |L13.58|
;;;145    	
;;;146    	if(!(conter_1ms %TIMER_50MS)){
00003a  2132              MOVS     r1,#0x32
00003c  4630              MOV      r0,r6
00003e  f7fffffe          BL       __aeabi_uidivmod
000042  2900              CMP      r1,#0
000044  d103              BNE      |L13.78|
;;;147    		set_flag(flag_50ms,ENABLE);}
000046  7828              LDRB     r0,[r5,#0]  ; BitFlag
000048  2108              MOVS     r1,#8
00004a  4308              ORRS     r0,r0,r1
00004c  7028              STRB     r0,[r5,#0]
                  |L13.78|
;;;148    	
;;;149    	if(!(conter_1ms %TIMER_100MS)){
00004e  2164              MOVS     r1,#0x64
000050  4630              MOV      r0,r6
000052  f7fffffe          BL       __aeabi_uidivmod
000056  2900              CMP      r1,#0
000058  d103              BNE      |L13.98|
;;;150    		set_flag(flag_100ms,ENABLE);}
00005a  7828              LDRB     r0,[r5,#0]  ; BitFlag
00005c  2110              MOVS     r1,#0x10
00005e  4308              ORRS     r0,r0,r1
000060  7028              STRB     r0,[r5,#0]
                  |L13.98|
;;;151    
;;;152    	if(conter_1ms >= 65500){
000062  4804              LDR      r0,|L13.116|
000064  4286              CMP      r6,r0
000066  d301              BCC      |L13.108|
;;;153    		conter_1ms = 0;}
000068  2000              MOVS     r0,#0
00006a  8068              STRH     r0,[r5,#2]
                  |L13.108|
;;;154    }
00006c  bd70              POP      {r4-r6,pc}
;;;155    
                          ENDP

00006e  0000              DCW      0x0000
                  |L13.112|
                          DCD      ||.data||
                  |L13.116|
                          DCD      0x0000ffdc

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __FUNCTION__
000000  6c6f6f70          DCB      0x6c,0x6f,0x6f,0x70
000004  5f313030          DCB      0x5f,0x31,0x30,0x30
000008  6d7300            DCB      0x6d,0x73,0x00
                  |symbol_number.45|
00000b  6c                DCB      0x6c
00000c  6f6f705f          DCB      0x6f,0x6f,0x70,0x5f
000010  35306d73          DCB      0x35,0x30,0x6d,0x73
000014  00                DCB      0x00
                  |symbol_number.46|
000015  6c6f6f            DCB      0x6c,0x6f,0x6f
000018  705f3130          DCB      0x70,0x5f,0x31,0x30
00001c  6d7300            DCB      0x6d,0x73,0x00
                  |symbol_number.47|
00001f  6c                DCB      0x6c
000020  6f6f705f          DCB      0x6f,0x6f,0x70,0x5f
000024  356d7300          DCB      0x35,0x6d,0x73,0x00
                  |symbol_number.48|
000028  6c6f6f70          DCB      0x6c,0x6f,0x6f,0x70
00002c  5f316d73          DCB      0x5f,0x31,0x6d,0x73
000030  00                DCB      0x00

                          AREA ||.data||, DATA, ALIGN=1

                  BitFlag
000000  0000              DCB      0x00,0x00
                  conter_1ms
000002  0000              DCW      0x0000
                  ||CNT||
000004  0001              DCW      0x0001
                  LOG
000006  0000              DCW      0x0000
                  |symbol_number.51|
000008  0001              DCW      0x0001
                  |symbol_number.52|
00000a  0000              DCW      0x0000
                  |symbol_number.53|
00000c  0001              DCW      0x0001
                  |symbol_number.54|
00000e  0000              DCW      0x0000
                  |symbol_number.55|
000010  0001              DCW      0x0001
                  |symbol_number.56|
000012  0000              DCW      0x0000
                  |symbol_number.57|
000014  0001              DCW      0x0001
                  |symbol_number.58|
000016  0000              DCW      0x0000

;*** Start embedded assembler ***

#line 1 "..\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_f37557b8____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_f37557b8____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_f37557b8____REVSH|
#line 402
|__asm___6_main_c_f37557b8____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
